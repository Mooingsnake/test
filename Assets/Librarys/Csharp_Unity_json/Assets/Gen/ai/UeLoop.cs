
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.ai
{

public sealed partial class UeLoop :  ai.Decorator 
{
    public UeLoop(JSONNode _json)  : base(_json) 
    {
        { if(!_json["num_loops"].IsNumber) { throw new SerializationException(); }  NumLoops = _json["num_loops"]; }
        { if(!_json["infinite_loop"].IsBoolean) { throw new SerializationException(); }  InfiniteLoop = _json["infinite_loop"]; }
        { if(!_json["infinite_loop_timeout_time"].IsNumber) { throw new SerializationException(); }  InfiniteLoopTimeoutTime = _json["infinite_loop_timeout_time"]; }
    }

    public UeLoop(int id, string node_name, ai.EFlowAbortMode flow_abort_mode, int num_loops, bool infinite_loop, float infinite_loop_timeout_time )  : base(id,node_name,flow_abort_mode) 
    {
        this.NumLoops = num_loops;
        this.InfiniteLoop = infinite_loop;
        this.InfiniteLoopTimeoutTime = infinite_loop_timeout_time;
    }

    public static UeLoop DeserializeUeLoop(JSONNode _json)
    {
        return new ai.UeLoop(_json);
    }

    public int NumLoops { get; private set; }
    public bool InfiniteLoop { get; private set; }
    public float InfiniteLoopTimeoutTime { get; private set; }

    public const int ID = -513308166;
    public override int GetTypeId() => ID;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "NodeName:" + NodeName + ","
        + "FlowAbortMode:" + FlowAbortMode + ","
        + "NumLoops:" + NumLoops + ","
        + "InfiniteLoop:" + InfiniteLoop + ","
        + "InfiniteLoopTimeoutTime:" + InfiniteLoopTimeoutTime + ","
        + "}";
    }
    }
}
