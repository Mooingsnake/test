
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.test
{

public sealed partial class MultiRowType3 :  Bright.Config.BeanBase 
{
    public MultiRowType3(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { var _json1 = _json["items"]; if(!_json1.IsArray) { throw new SerializationException(); } Items = new System.Collections.Generic.List<test.MultiRowType1>(_json1.Count); foreach(JSONNode __e in _json1.Children) { test.MultiRowType1 __v;  { if(!__e.IsObject) { throw new SerializationException(); }  __v = test.MultiRowType1.DeserializeMultiRowType1(__e); }  Items.Add(__v); }   }
    }

    public MultiRowType3(int id, System.Collections.Generic.List<test.MultiRowType1> items ) 
    {
        this.Id = id;
        this.Items = items;
    }

    public static MultiRowType3 DeserializeMultiRowType3(JSONNode _json)
    {
        return new test.MultiRowType3(_json);
    }

    public int Id { get; private set; }
    public System.Collections.Generic.List<test.MultiRowType1> Items { get; private set; }

    public const int ID = 540474972;
    public override int GetTypeId() => ID;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in Items) { _e?.Resolve(_tables); }
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Items) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Items:" + Bright.Common.StringUtil.CollectionToString(Items) + ","
        + "}";
    }
    }
}
