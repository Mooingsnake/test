
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.test
{

public sealed partial class MultiRowTitle :  Bright.Config.BeanBase 
{
    public MultiRowTitle(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { if(!_json["x1"].IsObject) { throw new SerializationException(); }  X1 = test.H1.DeserializeH1(_json["x1"]); }
        { var _json1 = _json["x2"]; if(!_json1.IsArray) { throw new SerializationException(); } X2 = new System.Collections.Generic.List<test.H2>(_json1.Count); foreach(JSONNode __e in _json1.Children) { test.H2 __v;  { if(!__e.IsObject) { throw new SerializationException(); }  __v = test.H2.DeserializeH2(__e); }  X2.Add(__v); }   }
        { var _json1 = _json["x3"]; if(!_json1.IsArray) { throw new SerializationException(); } int _n = _json1.Count; X3 = new test.H2[_n]; int _index=0; foreach(JSONNode __e in _json1.Children) { test.H2 __v;  { if(!__e.IsObject) { throw new SerializationException(); }  __v = test.H2.DeserializeH2(__e); }  X3[_index++] = __v; }   }
    }

    public MultiRowTitle(int id, string name, test.H1 x1, System.Collections.Generic.List<test.H2> x2, test.H2[] x3 ) 
    {
        this.Id = id;
        this.Name = name;
        this.X1 = x1;
        this.X2 = x2;
        this.X3 = x3;
    }

    public static MultiRowTitle DeserializeMultiRowTitle(JSONNode _json)
    {
        return new test.MultiRowTitle(_json);
    }

    public int Id { get; private set; }
    public string Name { get; private set; }
    public test.H1 X1 { get; private set; }
    public System.Collections.Generic.List<test.H2> X2 { get; private set; }
    public test.H2[] X3 { get; private set; }

    public const int ID = 540002427;
    public override int GetTypeId() => ID;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        X1?.Resolve(_tables);
        foreach(var _e in X2) { _e?.Resolve(_tables); }
        foreach(var _e in X3) { _e?.Resolve(_tables); }
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        X1?.TranslateText(translator);
        foreach(var _e in X2) { _e?.TranslateText(translator); }
        foreach(var _e in X3) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "X1:" + X1 + ","
        + "X2:" + Bright.Common.StringUtil.CollectionToString(X2) + ","
        + "X3:" + Bright.Common.StringUtil.CollectionToString(X3) + ","
        + "}";
    }
    }
}
