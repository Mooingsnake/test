
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.blueprint
{

public sealed partial class EnumClazz :  blueprint.Clazz 
{
    public EnumClazz(JSONNode _json)  : base(_json) 
    {
        { var _json1 = _json["enums"]; if(!_json1.IsArray) { throw new SerializationException(); } Enums = new System.Collections.Generic.List<blueprint.EnumField>(_json1.Count); foreach(JSONNode __e in _json1.Children) { blueprint.EnumField __v;  { if(!__e.IsObject) { throw new SerializationException(); }  __v = blueprint.EnumField.DeserializeEnumField(__e); }  Enums.Add(__v); }   }
    }

    public EnumClazz(string name, string desc, System.Collections.Generic.List<blueprint.Clazz> parents, System.Collections.Generic.List<blueprint.Method> methods, System.Collections.Generic.List<blueprint.EnumField> enums )  : base(name,desc,parents,methods) 
    {
        this.Enums = enums;
    }

    public static EnumClazz DeserializeEnumClazz(JSONNode _json)
    {
        return new blueprint.EnumClazz(_json);
    }

    public System.Collections.Generic.List<blueprint.EnumField> Enums { get; private set; }

    public const int ID = 1827364892;
    public override int GetTypeId() => ID;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        foreach(var _e in Enums) { _e?.Resolve(_tables); }
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
        foreach(var _e in Enums) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Parents:" + Bright.Common.StringUtil.CollectionToString(Parents) + ","
        + "Methods:" + Bright.Common.StringUtil.CollectionToString(Methods) + ","
        + "Enums:" + Bright.Common.StringUtil.CollectionToString(Enums) + ","
        + "}";
    }
    }
}
